---
#
#
#   PeekabooAV Installation Ansible Playbook
#
#   this playbook is work in progress
#   it has two purposes
#   - an easy way to have a fast installation
#   - documentation on how to set things up
#
#   it can also be used to update an installation
#
#
#   by felix bauer felix.bauer@atos.net
#
# 23.08.2017
#
# Copyright (C) 2016-2018 science + computing ag
#
#

#
# This ansible playbook describes and performs a basic installation 
# of PeekabooAV
#

# Require minimal ansible version
- hosts: all
  tasks:
    - name: Check for systemd module in ansible (minimal version required 2.5)
      systemd:
    - name: Verify ansible version
      assert:
        that: "ansible_version.full is version_compare('2.5', '>=')"
        msg: >
          "Minimum ansible version required is 2.5"

# The following code is just to have the owl and info scroll bye slowly.
- name: Print Peekaboo logo
  hosts: localhost
  become: no
  gather_facts: false
  vars:
    peekabooinst_banner: |
      Welcome to the PeekabooAV installer
      ====================================================================
                                                                          
                           ==                             =               
                           ========                 =======               
                             ===========?     ===========                 
                               ========================                   
                              ==       ========       ===                 
                             =           ====           =                 
                            +=     ?     ====     ?     ==                
                            ==           =,,=           ==                
                             =          ,,,,,,,         =+                
                             ==         =,,,,=         ==                 
                              +====+=======,====== =====                  
                              ==========================                  
                            ==============================                
                           ===============77===============               
                           =========77777777777777+========               
                           ======77777777777777777777======               
                           =====7777777777777777777777=====               
                            ===777777777777777777777777====               
                            ===7777777777777777777777777==                
                             ==7777777777777777777777777=                 
                             +=777777777777777777777777==                 
                              ==77777777777777777777777=                  
                               ==777777777777777777777=                   
                                +=7777777777777777777=                    
                                  =7777777777777777=                      
                                   ==777777777777==                       
                                      ==777777==                          
                              ,,,,,,::::::==::::::,,,,,,                  
                      ,,,,,,,,,,,,,,,              ,,,,,,,,,,,,,          
                ,,,,,,,,                                        ,,,,,,    
            ,,,,,                                                      ,,,
         ,,,                                                              
      ,                                                                   

  tasks:
    - debug:
        msg: "{{ peekabooinst_banner.split('\n') }}"


- name: Check OS version
  hosts: all
  tasks:
    - fail: 
        msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} not supported. Please use the version that is specified in README.md"
      when: (ansible_distribution != "Ubuntu") or (ansible_distribution_version < "18.04")

- name: Install software packages
  hosts: all
  gather_facts: no
  become: yes
  tasks:
    - name: Refresh apt package repositories
      apt:
        update_cache: yes
    - name: Install basic tools
      apt:
        name:
          - vim
          - ipython
          - less
          - iputils-ping
          - socket
          - netcat
          - git
          - curl
          - socat
    - name: Install Cuckoo and Peekaboo system dependencies
      apt:
        name:
          - python
          - python-pip
          - python-dev
          - libffi-dev
          - libssl-dev
          - python-virtualenv
          - python-setuptools
          - libjpeg-dev
          - zlib1g-dev
          - swig
          - sqlite3
          - swig
          - mongodb
          # required to install mysql python module in venv using pip
          - libmysqlclient-dev
    - name: Install Peekaboo python 3 system dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-dev
          - python3-virtualenv
          - python3-setuptools
      when: pyver == 3

- name: Install tcpdump and set capability
  hosts: peekabooav_server
  gather_facts: no
  become: true
  tasks:
    - name: Install tcpdump
      apt:
        name: tcpdump
        state: latest
    - name: Set capability
      capabilities:
        path: /usr/sbin/tcpdump
        capability: cap_net_raw,cap_net_admin=eip
        state: present

- name: Install mysql database and setup users and databases
  hosts: peekabooav_server
  gather_facts: no
  become: true
  tags: mysql
  tasks:
    - name: Installing Software
      apt:
        name:
          - mariadb-server
          # required to be installed globally by our system-installed ansible
          # to be able to connect to the database in the next step
          - python-mysqldb

    - name: Create databases
      mysql_db:
        name: "{{ item }}"
        state: present
        encoding: utf8
      with_items:
        - cuckoo
        - peekaboo

    - name: Create database user cuckoo
      mysql_user:
        name: cuckoo
        password: "{{ cuckoo_db_password }}"
        host: localhost
        priv: 'cuckoo.*:ALL,GRANT'
        state: present

    - name: Create database user peekaboo
      mysql_user:
        name: peekaboo
        password: "{{ peekaboo_db_password }}"
        host: localhost
        priv: 'peekaboo.*:ALL,GRANT'
        state: present

- name: Create a new peekaboo user and group 
  hosts: peekabooav_server
  gather_facts: no
  become: true
  tasks:
    - name: Create a new group peekaboo
      group:
        name: peekaboo
        state: present
        gid: 150
    - name: Create a new user peekaboo
      user:
        name: peekaboo
        group: peekaboo
        uid: 150
        home: /var/lib/peekaboo


- name: Install Cuckoo
  hosts: cuckoo_server
  gather_facts: no
  become: true
  vars:
    services:
      - cuckoo-rooter.service
      - cuckoo-web.service
      - cuckoo-api.service
      - cuckoo.service
    processor_unit:
      - cuckoo-process@.service
    processor_services:
      # generate list of service instances from template:
      # - cuckoo-process@1.service
      # - cuckoo-process@2.service
      # - ...
      "{{ range(1, cuckoo_processors + 1) | map('regex_replace', '^(.*)$', 'cuckoo-process@\\1.service') | list }}"
    legacy_services:
      - cuckoohttpd.service
      - cuckooapi.service
      - cuckoosandbox.service
    legacy_service_aliases:
      - cuckoo-http.service
      - cuckoo-api.service
      - cuckoo-sandbox.service
  tasks:
    - name: Install Cuckoo packages
      pip:
        name:
          - pip
          - setuptools
          - cuckoo
          - mysql
        virtualenv: /opt/cuckoo
        virtualenv_python: python2.7

    - name: Stop Cuckoo services
      systemd:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ services + processor_services + legacy_services }}"
      register: stop_result
      failed_when: stop_result is failed and not 'Could not find the requested service' in stop_result.msg

    - name: Remove legacy systemd unit files
      file:
        dest: "/etc/systemd/system/{{ item }}"
        state: absent
      with_items: "{{ legacy_services + legacy_service_aliases }}"

    - name: Copy Cuckoo systemd unit files to /etc
      copy:
        src: systemd/{{ item }}
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: 0644
        backup: true
      with_items: "{{ services + processor_unit }}"

    - name: Now place wrapper to run vboxmanage command on remote host
      # This is necessary to control vm start, stop and snapshot
      # restore on the host from within the Peekaboo-VM.
      copy:
        src: vbox/vboxmanage
        dest: /usr/local/bin/
        owner: root
        group: root
        mode: 0755
        backup: true

    - name: Secure storage directory
      file:
        path: /var/lib/peekaboo
        mode: 0700

    - name: Copy /var/lib/peekaboo/vboxmanage.conf
      # The configuration contains IP address and username of the
      # target user on the host that owns all virtual box vms.
      copy:
        src: vbox/vboxmanage.conf
        dest: /var/lib/peekaboo/vboxmanage.conf
        owner: peekaboo
        group: peekaboo
        mode: 0644
        backup: true

    - name: Install ssh
      apt:
        name: ssh
        state: latest

    - name: Setup ssh key for peekaboo user
      file:
        path: /var/lib/peekaboo/.ssh
        state: directory
        mode: 0700
        owner: peekaboo
        group: peekaboo

    - name: This key will have to be allowed on the host to authenticate the vm user
      become_user: peekaboo
      command: ssh-keygen -t ed25519 -f /var/lib/peekaboo/.ssh/id_ed25519 -P ''
      args:
        chdir: /var/lib/peekaboo
        creates: /var/lib/peekaboo/.ssh/id_ed25519

    - name: Create Cuckoo configuration directory /opt/cuckoo/etc
      tags: cuckooconf
      file:
        dest: /opt/cuckoo/etc
        state: directory

    - name: Instantiate and install custom config overlay for cuckoo
      tags: cuckooconf
      template:
        src: cuckoo/custom.kv.conf
        dest: /opt/cuckoo/etc/custom.kv.conf
        owner: peekaboo
        group: peekaboo
        mode: 0600
        backup: true

    # chicken'n'egg problem here: Cuckoo init connects to the database using
    # the old config (if it exists), creates the schema, initializes the cwd
    # (if it didn't exist) and then finally writes out the config merged with
    # stuff from the key-value config file, including the new database password.
    # There does not seem a way to first update the config and then the
    # database. Throwing away the whole old cwd seems too drastic a solution.
    - name: Check if cuckoo config exists
      stat: path=/var/lib/peekaboo/.cuckoo/conf/cuckoo.conf
      register: cuckoo_conf

    - name: Potentially hack new DB password into old config
      tags: cuckooconf
      replace:
        path: /var/lib/peekaboo/.cuckoo/conf/cuckoo.conf
        regexp: '^connection = .*'
        replace: "connection = mysql://cuckoo:{{ cuckoo_db_password }}@{{ mariadb_server }}/cuckoo"
      when: cuckoo_conf.stat.exists == True

    - name: Initial run of Cuckoo to create default configuration in peekaboo $HOME
      tags: cuckooconf
      become_user: peekaboo
      command: /opt/cuckoo/bin/cuckoo init --conf=/opt/cuckoo/etc/custom.kv.conf
      args:
        chdir: /var/lib/peekaboo

    - name: Install cuckoo community signatures
      command: /opt/cuckoo/bin/cuckoo community
      become_user: peekaboo
      args:
        chdir: /var/lib/peekaboo

    - name: Start and enable Cuckoo services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      with_items: "{{ services + processor_services }}"


- name: Install Peekaboo
  hosts: peekabooav_server
  gather_facts: no
  become: true
  vars:
    python_exe: "python{{ pyver }}"
  tasks:
    - name: Check if Peekaboo is switching python versions
      stat: path=/opt/peekaboo/bin/python
      register: peekaboo_python

    - name: Force python version switch in Peekaboo virtualenv
      file:
        path: /opt/peekaboo/bin/activate
        state: absent
      when: peekaboo_python.stat.exists and peekaboo_python.stat.lnk_target != python_exe

    # the pip module will fall back to pip2 when ansible is run with python2
    # even if we forced python3 for the venv. Workaround is to make sure that
    # pip2 does not exist in the venv.
    - name: Prevent fallback to pip2
      file:
        path: /opt/peekaboo/bin/pip2
        state: absent

    - name: Install Peekaboo optional components
      pip:
        name:
          - mysql
        virtualenv: /opt/peekaboo
        virtualenv_python: "{{ python_exe }}"

    - name: Check if we are to install a manually supplied Peekaboo version
      stat:
        path: PeekabooAV
      register: manually_supplied_peekaboo

    - name: Potentially warn about usage of manually supplied Peekaboo version
      debug:
        msg: "CAUTION: Using manually supplied Peekaboo version from PeekabooAV subdirectory"
      when: manually_supplied_peekaboo.stat.exists

    - name: Install manually supplied Peekaboo
      pip:
        chdir: PeekabooAV
        name: .
        state: latest
        virtualenv: /opt/peekaboo
      when: manually_supplied_peekaboo.stat.exists

    - name: Install latest Peekaboo release from PyPI
      pip:
        name: peekabooav
        state: latest
        virtualenv: /opt/peekaboo
      when: not manually_supplied_peekaboo.stat.exists

    - name: Copy Peekaboo systemd unit to /etc
      copy:
        src: /opt/peekaboo/share/doc/peekaboo/systemd/peekaboo.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: 0644
        backup: true

    - name: Copy mysql proxy systemd unit files to /etc
      copy:
        src: systemd/{{ item }}
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: 0644
        backup: true
      with_items:
        - mysql-proxy.service
        - mysql-proxy.socket

    - name: Enable Peekaboo services to run on startup but leave stopped for now
      systemd:
        name: peekaboo
        enabled: yes
        state: stopped
        daemon_reload: yes

    - name: Create Peekaboo configuration directory /opt/peekaboo/etc
      tags: peekabooconf
      file:
        dest: /opt/peekaboo/etc
        state: directory

    - name: Check if an old Peekaboo configuration exists in /opt/peekaboo
      stat: path=/opt/peekaboo/peekaboo.conf
      register: peekaboo_conf_old_stat

    # does not copy the old file if the presumably already configured target
    # already exists
    - name: Migrate old Peekaboo config to /opt/peekaboo/etc
      tags: peekabooconf
      command: cp -a /opt/peekaboo/peekaboo.conf /opt/peekaboo/etc/peekaboo.conf
      when: peekaboo_conf_old_stat.stat.exists
      args:
        creates: /opt/peekaboo/etc/peekaboo.conf

    - name: Remove old Peekaboo config in /opt/peekaboo
      tags: peekabooconf
      file:
        dest: /opt/peekaboo/peekaboo.conf
        state: absent

    # takes a backup of the currently installed version - best compromise
    # between preserving admin changes and getting new options rolled out
    - name: Place Peekaboo config in /opt/peekaboo/etc
      tags: peekabooconf
      template:
        src: peekaboo/peekaboo.conf
        dest: /opt/peekaboo/etc/peekaboo.conf
        owner: peekaboo
        group: peekaboo
        mode: 0600
        backup: true

    - name: Check if an old Peekaboo ruleset.conf exists in /opt/peekaboo
      stat: path=/opt/peekaboo/ruleset.conf
      register: ruleset_conf_old_stat

    - name: Migrate old Peekaboo ruleset config to /opt/peekaboo/etc
      tags: peekabooconf
      command: cp -a /opt/peekaboo/ruleset.conf /opt/peekaboo/etc/ruleset.conf
      when: ruleset_conf_old_stat.stat.exists
      args:
        creates: /opt/peekaboo/etc/ruleset.conf

    - name: Remove old Peekaboo ruleset config in /opt/peekaboo
      tags: peekabooconf
      file:
        dest: /opt/peekaboo/ruleset.conf
        state: absent

    - name: Place Peekaboo ruleset.conf in /opt/peekaboo/etc
      tags: peekabooconf
      copy:
        src: /opt/peekaboo/share/doc/peekaboo/ruleset.conf.sample
        dest: /opt/peekaboo/etc/ruleset.conf
        owner: root
        group: root
        mode: 0644
        backup: true

    - name: Place cuckoo processor wrapper in /opt/peekaboo/bin
      copy:
        src: cuckoo/cuckooprocessor.sh
        dest: /opt/peekaboo/bin
        owner: root
        group: root
        mode: 0755
        backup: true

    - name: Secure storage directory
      file:
        path: /var/lib/peekaboo
        mode: 0700

    - name: Start Peekaboo
      systemd:
        name: peekaboo
        state: started


- name: Install amavis and dependencies
  hosts: peekabooav_server
  gather_facts: no
  become: true
  tasks:
    - name: Installing software
      apt:
        name:
          - amavisd-new
          - arj
          - bzip2
          - cabextract
          - cpio
          - file
          - gzip
          - lhasa
          - nomarch
          # p7zip-full (7za) needed to correctly identify AES-encrypted ZIPs
          # (zip: unsupported compression method 99)
          - p7zip-full
          - pax
          - rar
          - unrar
          - unzip
          - zip

    - name: Copy amavis configs to conf.d
      template:
        src: amavis/{{ item }}
        dest: /etc/amavis/conf.d/
        owner: root
        group: root
        mode: 0644
        backup: true
      with_items:
        - 15-av_scanners
        - 15-content_filter_mode
        - 50-peekaboo

    - name: Copy amavis plugin to conf.d
      copy:
        # assumes that peekaboo and amavis are on the same box, needs a rethink
        # once those roles are separated
        src: /opt/peekaboo/share/doc/peekaboo/amavis/10-ask_peekaboo
        dest: /etc/amavis/conf.d/
        owner: root
        group: root
        mode: 0644
        backup: true

    - name: Restart amavis
      systemd:
        state: restarted
        daemon_reload: yes
        name: amavis

- name: Install INetSim
  hosts: inetsim_server
  gather_facts: no
  become: true
  tasks:
    - name: Installing software
      apt:
        name:
          - inetsim
          - iptables

    - name: DNAT to INetSim
      iptables:
        table: nat
        chain: PREROUTING
        in_interface: enp0s3
        jump: DNAT
        to_destination: 192.168.56.5
        comment: Redirect all traffic to 192.168.56.5
      become: yes

    - name: Copy /etc/inetsim/inetsim.conf
      copy:
        src: net/inetsim.conf
        dest: /etc/inetsim/inetsim.conf
        owner: root
        group: root
        mode: 0644
        backup: true

    - name: Restart inetsim
      systemd:
        state: restarted
        daemon_reload: yes
        name: inetsim

- name: Allow access to files and sockets for amavis and peekaboo
  hosts: peekabooav_server
  gather_facts: no
  become: true
  tasks:
    - name: Add secondary group amavis to user peekaboo
      user:
        name: peekaboo
        groups: amavis


- name: Clean up installer directory
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Remove temporary storage files of deployed passwords
      file:
        state: absent
        path: "{{ item }}"
      with_items:
        - cuckoo_db_password
        - peekaboo_db_password
