--- /usr/share/rspamd/lualib/lua_scanners/common.lua.orig
+++ /usr/share/rspamd/lualib/lua_scanners/common.lua
@@ -64,7 +64,7 @@
   end
 end
 
-local function yield_result(task, rule, vname, dyn_weight, is_fail, maybe_part)
+local function yield_result(task, rule, vname, dyn_weight, symbol_extra, maybe_part)
   local all_whitelisted = true
   local patterns
   local symbol
@@ -80,28 +80,33 @@
 
 
   -- This should be more generic
-  if not is_fail then
+  if not symbol_extra then
     patterns = rule.patterns
     symbol = rule.symbol
-    threat_info = rule.detection_category .. 'found'
+    threat_info = rule.detection_category .. ' found'
     if not dyn_weight then
       dyn_weight = 1.0
     end
-  elseif is_fail == 'fail' then
+  elseif symbol_extra == 'fail' then
     patterns = rule.patterns_fail
     symbol = rule.symbol_fail
     threat_info = "FAILED with error"
     dyn_weight = 0.0
-  elseif is_fail == 'encrypted' then
+  elseif symbol_extra == 'encrypted' then
     patterns = rule.patterns
     symbol = rule.symbol_encrypted
     threat_info = "Scan has returned that input was encrypted"
     dyn_weight = 1.0
-  elseif is_fail == 'macro' then
+  elseif symbol_extra == 'macro' then
     patterns = rule.patterns
     symbol = rule.symbol_macro
     threat_info = "Scan has returned that input contains macros"
     dyn_weight = 1.0
+  elseif type(symbol_extra) == 'string' then
+    patterns = rule.patterns
+    symbol = symbol_extra
+    threat_info = string.format("special scan result set by %s: %s", rule.name, symbol_extra)
+    dyn_weight = 1.0
   end
 
   for _, tm in ipairs(threat_table) do
@@ -515,6 +520,7 @@
 exports.condition_check_and_continue = need_check
 exports.save_cache = save_cache
 exports.create_regex_table = create_regex_table
+exports.gen_extension = gen_extension
 exports.check_parts_match = check_parts_match
 exports.check_metric_results = check_metric_results
 
--- /usr/share/rspamd/lualib/lua_scanners/init.lua.orig
+++ /usr/share/rspamd/lualib/lua_scanners/init.lua
@@ -50,6 +50,7 @@
 require_scanner('razor')
 require_scanner('pyzor')
 require_scanner('cloudmark')
+require_scanner('peekaboo')
 
 exports.add_scanner = function(name, t, conf_func, check_func)
   assert(type(conf_func) == 'function' and type(check_func) == 'function',
--- /usr/share/rspamd/plugins/external_services.lua.orig
+++ /usr/share/rspamd/plugins/external_services.lua
@@ -16,6 +16,7 @@
 ]] --
 
 local rspamd_logger = require "rspamd_logger"
+local rspamd_util = require "rspamd_util"
 local lua_util = require "lua_util"
 local lua_redis = require "lua_redis"
 local fun = require "fun"
@@ -105,12 +106,20 @@
       }
       # `whitelist` points to a map of IP addresses. Mail from these addresses is not scanned.
       whitelist = "/etc/rspamd/antivirus.wl";
+      # Replace content that exactly matches the following string to the EICAR pattern
+      # Useful for E2E testing when another party removes/blocks EICAR attachments
+      #eicar_fake_pattern = 'testpatterneicar';
     }
   }
   ]])
   return
 end
 
+-- Encode as base32 in the source to avoid crappy stuff
+local eicar_pattern = rspamd_util.decode_base32(
+    [[akp6woykfbonrepmwbzyfpbmibpone3mj3pgwbffzj9e1nfjdkorisckwkohrnfe1nt41y3jwk1cirjki4w4nkieuni4ndfjcktnn1yjmb1wn]]
+)
+
 local function add_scanner_rule(sym, opts)
   if not opts.type then
     rspamd_logger.errx(rspamd_config, 'unknown type for external scanner rule %s', sym)
@@ -158,7 +167,9 @@
 
   -- if any mime_part filter defined, do not scan all attachments
   if opts.mime_parts_filter_regex ~= nil
-      or opts.mime_parts_filter_ext ~= nil then
+      or opts.mime_parts_filter_regex_exclude ~= nil
+      or opts.mime_parts_filter_ext ~= nil
+      or opts.mime_parts_filter_ext_exclude ~= nil then
     rule.scan_all_mime_parts = false
   else
     rule.scan_all_mime_parts = true
@@ -168,9 +179,10 @@
   rule.patterns_fail = common.create_regex_table(opts.patterns_fail or {})
 
   rule.mime_parts_filter_regex = common.create_regex_table(opts.mime_parts_filter_regex or {})
+  rule.mime_parts_filter_regex_exclude = common.create_regex_table(opts.mime_parts_filter_regex_exclude or {})
 
   rule.mime_parts_filter_ext = common.create_regex_table(opts.mime_parts_filter_ext or {})
-
+  rule.mime_parts_filter_ext_exclude = common.create_regex_table(opts.mime_parts_filter_ext_exclude or {})
   if opts.whitelist then
     rule.whitelist = rspamd_config:add_hash_map(opts.whitelist)
   end
@@ -180,7 +192,21 @@
 
       fun.each(function(p)
         local content = p:get_content()
-        if content and #content > 0 then
+        local clen = #content
+        if content and clen > 0 then
+          if opts.eicar_fake_pattern then
+            if type(opts.eicar_fake_pattern) == 'string' then
+              -- Convert it to Rspamd text
+              local rspamd_text = require "rspamd_text"
+              opts.eicar_fake_pattern = rspamd_text.fromstring(opts.eicar_fake_pattern)
+            end
+
+            if clen == #opts.eicar_fake_pattern and content == opts.eicar_fake_pattern then
+              rspamd_logger.infox(task, 'found eicar fake replacement part in the part (filename="%s")',
+                p:get_filename())
+              content = eicar_pattern
+            end
+          end
           cfg.check(task, content, p:get_digest(), rule, p)
         end
       end, common.check_parts_match(task, rule))
@@ -190,10 +216,31 @@
     end
   end
 
+  local function report_cb(task)
+    if cfg.report and type(cfg.report) == 'function' then
+      if rule.scan_mime_parts then
+
+        fun.each(function(p)
+          local content = p:get_content()
+          local clen = #content
+          if content and clen > 0 then
+            cfg.report(task, content, p:get_digest(), rule, p)
+          end
+        end, common.check_parts_match(task, rule))
+
+      else
+        cfg.report(task, task:get_content(), task:get_digest(), rule)
+      end
+    else
+      return
+    end
+  end
+
   rspamd_logger.infox(rspamd_config, 'registered external services rule: symbol %s; type %s',
-      rule.symbol, rule.type)
+    rule.symbol, rule.type)
 
-  return scan_cb, rule
+  return scan_cb, report_cb, rule
+
 end
 
 -- Registration
@@ -209,16 +256,16 @@
       if not m.name then
         m.name = k
       end
-      local cb, nrule = add_scanner_rule(k, m)
+      local scan_cb, report_cb, nrule = add_scanner_rule(k, m)
 
-      if not cb then
+      if not scan_cb then
         rspamd_logger.errx(rspamd_config, 'cannot add rule: "' .. k .. '"')
       else
         m = nrule
 
         local t = {
           name = m.symbol,
-          callback = cb,
+          callback = scan_cb,
           score = 0.0,
           group = N
         }
@@ -226,6 +273,9 @@
         if m.symbol_type == 'postfilter' then
           t.type = 'postfilter'
           t.priority = lua_util.symbols_priorities.medium
+        elseif m.symbol_type == 'prefilter' then
+          t.type = 'prefilter'
+          t.priority = lua_util.symbols_priorities.medium
         else
           t.type = 'normal'
         end
@@ -239,6 +289,29 @@
         end
 
         local id = rspamd_config:register_symbol(t)
+
+        if report_cb and m.symbol_report then
+          rspamd_logger.infox(rspamd_config, 'added external services report symbol %s -> %s', k, m.symbol_report)
+          local r = {
+            name = m.symbol_report,
+            callback = report_cb,
+            score = 0.0,
+            group = N
+          }
+
+          if m.symbol_report_type == 'postfilter' then
+            r.type = 'postfilter'
+            r.priority = 3
+          elseif m.symbol_report_type == 'prefilter' then
+            r.type = 'prefilter'
+            r.priority = 3
+          else
+            r.type = 'normal'
+          end
+
+          rspamd_config:register_symbol(r)
+
+        end
 
         if m.symbol_fail then
           rspamd_config:register_symbol({
