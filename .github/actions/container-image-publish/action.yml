name: Container image publish
description: Build and publish container image

inputs:
  ref:
    required: true
    description: 'ref for which to build the image'
  base-ref:
    required: false
    description: 'base ref of a pull request'
  latest:
    required: false
    default: false
    description: >
      This is the latest release overall and therefore gets the latest tag
  latest-major:
    required: false
    default: false
    description: >
      This is the latest in a major release series and therefore gets the major
      version tag
  builddir:
    required: true
    type: string
    description: 'build context to use'
  event:
    required: false
    default: ${{ github.event_name }}
    description: 'The event that triggered the build'
  registry:
    required: false
    default: ghcr.io
    description: 'Container registry to use'
  registry_username:
    required: false
    default: ${{ github.actor }}
    description: 'User name to use for login to the registry'
  registry_password:
    required: true
    description: 'Password to use for login to the registry'
  image_name:
    required: true
    type: string
    description: 'Name of the image to build in <account>/<repo> syntax'

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # for scheduled builds, github.ref/$GITHUB_REF is always latest commit
        # on default branch
        ref: ${{ inputs.ref }}

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: inputs.event != 'pull_request'
      uses: sigstore/cosign-installer@v3.7.0

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ inputs.registry }}
      if: inputs.event != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Select image tagging scheme
      id: tags
      env:
        REF: ${{ inputs.ref }}
        LATEST_MAJOR: ${{ inputs.latest-major }}
      shell: bash
      run: |
        # use pep440/semver versioning, particularly only moving latest to
        # release versions (no prerelease and no branches).
        # build edge from last commit on devel branch
        echo "::notice::Defaulting to pep440/edge/ref tagging scheme"
        tags="type=pep440,pattern={{version}}
          type=edge
          type=ref,event=branch
          type=ref,event=pr"

        if [ "$LATEST_MAJOR" = "true" ] ; then
          echo "::notice::Release is latest major version"
          tags="$tags
            type=pep440,pattern={{major}}"
        fi

        # build release branch edges
        if echo "$REF" | grep \
              -e '^refs/heads/[0-9]\+\.[0-9]\+$' \
            > /dev/null ; then
          echo "::notice::Switching to release edge tagging scheme"
          tags="type=ref,event=branch,suffix=-edge"
        fi

        # preserve newlines
        tags=${tags//$'\n'/'%0A'}

        echo "::set-output name=tags::$tags"

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: michaelweiser/metadata-action@ref-input
      with:
        images: ${{ inputs.registry }}/${{ inputs.image_name }}
        tags: |
          ${{ steps.tags.outputs.tags }}
        ref: ${{ inputs.ref }}
        # tagging-triggered builds never move the latest tag. Instead we wait
        # for the next scheduled image rebuild because it has the overview what
        # the latest version actually is.
        flavor: |
          latest=${{ inputs.latest }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v6.12.0
      with:
        context: ${{ inputs.builddir }}
        push: ${{ inputs.event != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ inputs.event != 'pull_request' }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      shell: bash
      run: cosign sign --yes ${{ inputs.registry }}/${{ inputs.image_name }}@${{
        steps.build-and-push.outputs.digest }}
